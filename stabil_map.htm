<!DOCTYPE html>
<html>
<head>


	<title>Rent Stabilization Map</title>

	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<link rel="shortcut icon" type="image/x-icon" href="docs/images/favicon.ico" />

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"
		integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
		crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"
		integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
		crossorigin=""></script>

<style>
.legendProp {
    line-height: 18px;
    color: #555;
}
.legendProp i {
    width: 60px;
    height: 15px;
    float: left;
    margin-right: 8px;
    opacity: 0.7;
}
.legendNum {
    line-height: 18px;
    color: #555;
}
.legendNum i {
    width: 60px;
    height: 15px;
    float: left;
    margin-right: 8px;
    opacity: 0.7;
	}
.leaflet-container {
    background-color:rgba(255,0,0,0.0);
}

.info {
    padding: 6px 8px;
    background: white;
		font: 14px/16px Arial, Helvetica, sans-serif;
    background: rgba(211,211,211,1);
    border-radius: 5px;
}
.info h4 {
    margin: 0 0 5px;
    color: #777;
	}
</style>

</head>
<body>

	<!--div for map-->
<div id="mapid" style="width: 800px; height: 550px;"></div>

<!--get zip data-->
<script type="text/javascript" src= 'zip_stab_data_2016.js'></script>

<!--radio button for selecting data representation-->
<fieldset class="checkbox" style="font: 14px/16px Arial; width: 778px; background: rgba(211,211,211,1);">
		Show
    <input type="radio" name="stab_stat" value="number" id="number" onClick="setStats('num_stab_bdgs')">
    <label for="number" ><b>number</b></label>

    <input type="radio" name="stab_stat" value="proportion" id="proportion" onClick="setStats('prop_stab')" checked="checked" >
    <label for="proportion"><b> proportion </b> </label>
		of stabilized buildings
</fieldset>

<!--create map and base tile-->
<script type="text/javascript">
	var map = L.map('mapid').setView([40.65, -73.95], 12);

L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiLWN1cmx5ZnJpZXMtIiwiYSI6ImNqam13eGh2NDE2Y2oza21mMTdvMXh4cWQifQ.NxuHEBozNODh4JmlO1Sh-g', {
		maxZoom: 18,
		attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
			'<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
			'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
		id: 'mapbox.light'
	}).addTo(map)

	// add color based on stabilization stats.
	function getColor(s) {
		if(type=='num_stab_bdgs'){
			//stat_list = [750,650,550,450,350,250,150,50] //uniformish
			stat_list = [707,557,438,386,312,252,214,83]//quantiles
		}
		else{
			//stat_list = [.23,.21,.18,.15,.12,.09,.06,.03] //uniformish
			stat_list = [.22,.17,.15,.12,.1,.08,.07,.056]//quantiles
		}

    return s > stat_list[0] ? '#00441b' :
           s > stat_list[1]  ? '#006d2c' :
           s > stat_list[2]  ? '#238b45' :
           s > stat_list[3]  ? '#41ae76' :
           s > stat_list[4]   ? '#66c2a4' :
           s > stat_list[5]   ? '#99d8c9' :
           s > stat_list[6]   ? '#ccece6' :
           s > stat_list[7]   ? '#e5f5f9':
											'#f7fcfd';
}

function style(feature) {
    return {
        fillColor: getColor(feature['properties'][type]),
        weight: 2,
        opacity: 1,
        color: 'white',
        fillOpacity: 0.7
    };
}



//add legend
//legend for when map is showing proportion of buildings that are stabilized
var legendProp = L.control({position: 'bottomright'});
legendProp.onAdd = function (map) {
		var div = L.DomUtil.create('div', 'info legendProp'),
		//grades= [0,.03,.06,.09,.12,.15,.18,.21,.23]//uniformish
		grades = [0,.06,.07,.08,.1,.12,.15,.17,.22]//quantiles
		labels = [];

	 // generate a label with a colored square for each interval
    for (var i = 0; i < grades.length; i++) {
        div.innerHTML +=
            '<i style="background:' + getColor(grades[i] + .0001) + '"></i> ' +
            grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
    }

    return div;
};

//legend for when map is showing number of buildings that are stabilized
var legendNum = L.control({position: 'bottomright'});
legendNum.onAdd = function (map) {

	    var div = L.DomUtil.create('div', 'info legendNum'),
					//grades = [0,50, 150, 250, 350, 450, 550, 650, 750] //uniformish
					grades = [0,83,214,252,312,387,438,557,707]; //quantiles
	        labels = [];

    // generate a label with a colored square for each interval
    for (var i = 0; i < grades.length; i++) {
        div.innerHTML +=
            '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
            grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
    }

    return div;
};


var type = 'prop_stab' //global variable that determines whether map shows
//proportion of buildings that are stabilized or number of stabilized buildings

//function for resetting stats deisplayed on the choloropleth
function setStats(stat){
	type = stat
	geojson.eachLayer(function(layer) {geojson.resetStyle(layer);})
	if(type=='prop_stab'){
		legendNum.remove(map)
		legendProp.addTo(map);
	}
	else {
		legendProp.remove(map)
		legendNum.addTo(map)
	}
}


//initially add legend
if(type=='prop_stab'){
	legendProp.addTo(map);
}
else {
	legendNum.addTo(map)
}

//add controls

//create border around zip code
function highlightFeature(e) {
    var layer = e.target;

    layer.setStyle({
        weight: 2,
        color: '#666',
        dashArray: '',
        fillOpacity: 0.7
			});
		info.update(layer.feature.properties,'prop');


    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
        layer.bringToFront();
    }
}


//take border away
function resetHighlight(e) {
    geojson.resetStyle(e.target);
		info.update();
}

function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight
			    });
}

//add choropleth with zip code data
var geojson;

geojson = L.geoJson(zip_data, {
    style: style,
    onEachFeature: onEachFeature
}).addTo(map);

//info box--specifies data representation and shows stats when hover over specific zip
var info = L.control();

info.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
    this.update();
    return this._div;
};

// method that we will use to update the control based on feature properties passed
info.update = function (props) {
	if (type=='num_stab_bdgs'){
    this._div.innerHTML = '<h4>number of stabilized buildings:</h4>' +  (props ?
        '<b>' + props.postalcode + '</b><br />' + props.num_stab_bdgs + ' buildings'
        : '');
			}
			else{
				this._div.innerHTML = '<h4> proportion of buildings that are stabilized:</h4>' +  (props ?
						'<b>' + props.postalcode + '</b><br />' + props.prop_stab
						: '');
			}
};

info.addTo(map);


</script>



</body>
</html>
